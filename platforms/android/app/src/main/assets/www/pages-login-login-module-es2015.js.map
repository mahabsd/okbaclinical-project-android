{"version":3,"sources":["./src/app/pages/login/login.component.ts","./src/app/pages/login/login.module.ts","./src/app/pages/login/login.component.html"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA0C;AACD;AAC2B;AACnB;AAGa;IAQjD,cAAc,SAAd,cAAc;IAKzB,YAAmB,WAAuB,EAAU,WAAyB,EAAU,MAAc;QAAlF,gBAAW,GAAX,WAAW,CAAY;QAAU,gBAAW,GAAX,WAAW,CAAc;QAAU,WAAM,GAAN,MAAM,CAAQ;QACnG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,wDAAS,CAAC;YACxB,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACpD,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SAClD,CAAC;IAEJ,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,wDAAS,CAAC;YAC7B,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACpD,QAAQ,EAAE,IAAI,wDAAS,CAAC;gBACtB,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;aAClD,CAAC;SAEH,CAAC;IACJ,CAAC;IACM,QAAQ,CAAC,MAAc;QAC5B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;YACtB,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;YAClC,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;SAC3C,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YAC5D,IAAI,CAAC,QAAQ,GAAG,GAAG;YACnB,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACnD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC;IAEJ,CAAC;IAED,eAAe;QACb,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,KAAK,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;;YApDQ,yDAAW;YAGX,2EAAY;YALZ,sDAAM;;AAaF,cAAc;IAL1B,+DAAS,CAAC;QACT,QAAQ,EAAE,WAAW;QACrB,kFAAqC;KACtC,CAAC;qCAO+B,yDAAW,EAAuB,2EAAY,EAAkB,sDAAM;GAL1F,cAAc,CAyC1B;AAzC0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdc;AACM;AACA;AACmB;AACR;AACP;AAE5C,MAAM,MAAM,GAAG;IACpB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,+DAAc,EAAE,SAAS,EAAE,MAAM,EAAE;CAC3D,CAAC;IAcW,WAAW,SAAX,WAAW;CAAI;AAAf,WAAW;IAZvB,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC7B,0DAAW;YACX,kEAAmB;YACnB,kEAAY;SACb;QACD,YAAY,EAAE;YACZ,+DAAc;SACf;KACF,CAAC;GACW,WAAW,CAAI;AAAJ;;;;;;;;;;;;;ACvBxB;AAAe,4sEAA6oE,E","file":"pages-login-login-module-es2015.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\nimport { GuardserviceService } from 'src/app/services/guardservice.service';\r\nimport { LoginService } from 'src/app/services/login.service';\r\nimport { UsersService } from 'src/app/services/users.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html'\r\n})\r\n\r\nexport class LoginComponent {\r\n  public form: FormGroup;\r\n  public settings: Settings;\r\n  response;\r\n  loginUser;\r\n  constructor(public appSettings:AppSettings, private formService: LoginService, private router: Router) { \r\n    this.settings = this.appSettings.settings; \r\n    this.form = new FormGroup({\r\n      password: new FormControl('', [Validators.required]),\r\n      email: new FormControl('', [Validators.required]),\r\n    })\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loginUser = new FormGroup({\r\n      password: new FormControl('', [Validators.required]),\r\n      contacts: new FormGroup({\r\n        email: new FormControl('', [Validators.required]),\r\n      }),\r\n\r\n    })\r\n  }\r\n  public onSubmit(values: Object): void {\r\n    this.loginUser.setValue({\r\n      password: this.form.value.password,\r\n      contacts: { email: this.form.value.email }\r\n    })\r\n    this.formService.loginUser(this.form.value).subscribe((res) => {\r\n      this.response = res\r\n      localStorage.setItem('token', this.response.token);\r\n      this.router.navigate(['/']);\r\n    })\r\n\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.settings.loadingSpinner = false;\r\n    });\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { LoginComponent } from './login.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: LoginComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    LoginComponent\r\n  ]\r\n})\r\nexport class LoginModule { }","export default \"<mat-sidenav-container class=\\\"h-100\\\">\\r\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"h-100\\\">\\r\\n       <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit(form.value)\\\" fxFlex=\\\"90\\\" fxFlex.gt-sm=\\\"30\\\" fxFlex.sm=\\\"60\\\" class=\\\"mat-elevation-z6\\\">\\r\\n            <app-content-header \\r\\n                [icon]=\\\"'exit_to_app'\\\" \\r\\n                [title]=\\\"'Login'\\\" \\r\\n                [hideBreadcrumb]=\\\"true\\\"\\r\\n                [hasBgImage]=\\\"true\\\" \\r\\n                [class]=\\\"'py-4'\\\"></app-content-header>            \\r\\n            <div class=\\\"p-3\\\">\\r\\n                <!-- <a mat-button routerLink=\\\"/register\\\" color=\\\"accent\\\" class=\\\"w-100\\\">Don't have an account? Sign up now!</a> -->\\r\\n                <mat-form-field class=\\\"w-100\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mat-icon-sm mb-2 mr-2 secondary-text-color\\\">mail</mat-icon>\\r\\n                    <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\r\\n                    <mat-error *ngIf=\\\"form.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"form.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"w-100\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mat-icon-sm mb-2 mr-2 secondary-text-color\\\">lock</mat-icon>\\r\\n                    <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" formControlName=\\\"password\\\">\\r\\n                    <mat-error *ngIf=\\\"form.controls.password.errors?.required\\\">Password is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"form.controls.password.hasError('minlength')\\\">Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n                </mat-form-field>               \\r\\n                <!-- <mat-slide-toggle formControlName=\\\"rememberMe\\\" class=\\\"my-2\\\">Keep me signed in</mat-slide-toggle> -->\\r\\n                <button mat-raised-button color=\\\"primary\\\" class=\\\"mat-elevation-z6 w-100 mt-3\\\" type=\\\"submit\\\">SIGN IN</button>\\r\\n            </div>\\r\\n        </form>\\r\\n  </div>\\r\\n</mat-sidenav-container>\";"],"sourceRoot":"webpack:///"}